(defn test-arith ()
  (do
   (assert-eq (+ 1 2) 3)
   (assert-eq (+ 1) 1)
   (assert-eq (- 1 2) -1)
   (assert-eq (/ 1 2) 0.5)
   (assert-eq (* 1 2 3) 6)
    ))

(defn test-equality ()
  (do
    (assert-eq 1 1)
    (assert-eq 1.5 1.5)
    (assert-eq (* 1.5 2) 3)
    (assert-eq (* 2 1.5) 3)
    (assert-eq (symbol "foo") (symbol "foo"))
    (assert-eq "abc" "abc")
    (assert-eq (list 1 2 3) (list 1 2 3))
    (assert-eq ^(1 2 3) (list 1 2 3))
    (assert-eq (list 1 2 3) ^(1 2 3))
    (assert-eq ^(1 2 3) ^(1 2 3))
    (assert-eq assert-eq assert-eq) ;; built-in
    (assert-eq test-equality test-equality) ;; user-defined
    (assert-eq '(1 2 3) '(1 2 3))
    (assert-eq nil nil)
    (assert-eq (dict 1 2 3 4) (dict 1 2 3 4)) ;; dicts are still a built-in
    ;; TODO: Handle record equality
    ;; (assert-eq (set '(1 2 (set 3))) (set '(1 2 (set 3))))
   ))

(defn test-type-coercion ()
  (do
    (assert-eq "int" (type 1))
    (assert-eq "num" (type 1.5))
    (assert-eq "int" (type (* 1.5 2)))
    (assert-eq "num" (type (/ 1 3)))
   ))

(defn test-defn-docs
    "hello world"
    ()
  (assert-eq "hello world" (doc test-defn-docs)))

(defn test-stdlib-functions
  ()
  (do
    ;; Primes and related functions
    (assert-eq '(2 3 5 7) (primes 10))
    (assert-eq '(1 2 4 5 10 20) (divisors 20))
    (assert-eq "hellohello" (* "hello" 2))
    ;; Sets
    (assert-eq
      '("Set.contains" "Set.intersection" "Set.len" "Set.to_list" "Set.union")
     (sort (map head (methods (Set 1 2 3)))))))

(defn bind-not-polluting-local-scope
  ()
  (assert-eq '(1 2 3) (quicksort '(3 2 1))))

(defn run-test (test-fn)
  (bind (test-res (catch-err (test-fn)))
        (if (nil? test-res)
            (do (print ".") true)
            (do
             (println "\n" test-res "\n")
             false))))

(defn run-tests (& tests)
  (if (not (all ident (map run-test tests)))
      (print "\nTest suite failed!\n")
      (print "\nTest suite passed!\n")))

(run-tests
  test-arith
  test-equality
  test-type-coercion
  test-defn-docs
  test-stdlib-functions
  bind-not-polluting-local-scope
  )
