(defn range-contains-another (rr to-test)
  ;; Does rr contain to-test?
  ;; rr := (x y)
  ;; to-test := (a b)
  ;; x <= a && b <= y
  (bind ((x y) rr
         (a b) to-test)
        (and (<= x a) (<= b y))))

(defn one-range-is-a-subset (left right)
  (or (range-contains-another left right)
      (range-contains-another right left)))

(defn num-is-in-range (num range)
  (and (<= (first range) num) (<= num (second range))))

(defn partial-overlap? (left-range right-range)
  (or (num-is-in-range (first left-range) right-range)
      (num-is-in-range (second left-range) right-range)
      (num-is-in-range (first right-range) left-range)
      (num-is-in-range (second right-range) left-range)))

(def input-file "examples/advent-of-code-2022/input/day4.txt")

(def rr (re::compile "([0-9]+)-([0-9]+),([0-9]+)-([0-9]+)"))

(defn format-line (line-tuple)
  ^(^((first line-tuple) (second line-tuple))
   (-> line-tuple tail tail)))

(defn parse-input (filename)
  (map #(format-line (mapt int (head (.captures rr $1)))) (.read_lines (fs::open filename))))

(defn part-1 ()
  (do
   (println "-------Part 1-------")
   (println
     (len (filter @(apply one-range-is-a-subset) (parse-input input-file))))
    (println "--------------------")))

(defn part-2 ()
  (do
   (println "-------Part 1-------")
   (println
    (len (filter @(apply partial-overlap?) (parse-input input-file))))
    (println "--------------------")))

(part-1)
(part-2)
