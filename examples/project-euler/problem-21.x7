(include "examples/project-euler/utils.x7")

;; (defn sum-proper-divisors-of (x)
;;   (reduce (fn (acc d) (if (= 0 (% x d)) (+ d acc) acc)) 0 (range 1 x)))

;; (defn proper-divisor-iter (num)
;;   (map (fn (x) (tuple x (sum-proper-divisors-of x))) (lazy (range 1 num))))

;; Copied from Problem 12

(def primes-list (primes 10000))

(defn prime-divisors-of (num)
  (reduce (fn (acc x) (if (= 0 (% num x)) (cons x acc) acc))
          (tuple)
          (take-while (fn (x) (< x num)) primes-list)))

(defn count-times-divides (n divisor)
  (cond
    (= 0 (% n divisor)) (+ 1 (count-times-divides (/ n divisor) divisor))
    true 0))

(defn prime-powers-of (num)
  (bind
   (num-primes-list (prime-divisors-of num)
    number-is-prime? (empty? num-primes-list))
   (if number-is-prime?
       (tuple (tuple num) (tuple 1))
       (tuple num-primes-list (map (fn (prime) (count-times-divides num prime)) num-primes-list))
       )))

(defn calculate-divisor (primes prime-powers)
  (apply * (map (fn (tup) (pow (nth 0 tup) (nth 1 tup))) (zip primes prime-powers))))

(defn generate-divisors (num)
  (bind
   (primes-and-powers (prime-powers-of num)
    primes            (nth 0 primes-and-powers)
    powers            (nth 1 primes-and-powers))
   (map (fn (tup) (calculate-divisor primes tup))
        (apply product (map (fn (x) (range (inc x))) powers)))))

(defn proper-sum-of-divisors (num)
  (- (reduce + (generate-divisors num)) num))

(def amicable-pairs (dict))

(def total-to-check 10000)

(foreach
 (fn (num) (def amicable-pairs (set-dict amicable-pairs num (proper-sum-of-divisors num))))
 (range 2 total-to-check))

(defn get-amicable-numbers ()
  (filter
   (fn (num)
       (and
        (not (= num (get amicable-pairs num)))
        (= num (get amicable-pairs (get amicable-pairs num)))))
   (range 2 total-to-check)))

(print-res (apply + (get-amicable-numbers)))

;; (defn sum-divisors (primes prime-powers)
;;   (cond
;;     (empty? primes) 0
;;     (= 0 (head prime-powers)) (sum-divisors (tail primes) (tail prime-powers))
;;     true (+ (dot-product primes prime-powers)
;;             (sum-divisors primes (tuple (dec (head prime-powers)) (tail prime-powers))))
;;     ))
