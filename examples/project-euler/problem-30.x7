(include "examples/project-euler/utils.x7")

;; (defn ->> (item & funcs)
;;   ;; Similar to clojure's threading macro (and the parser is busted)
;;   (cond
;;     (empty? funcs) item
;;     true           (apply ->> (cons ((head funcs) item) (tail funcs)))))

;; Idea: Generate all unique digit combinations; compare
;; that list of digits to the list of digits from the number
;; generated by summing the fifth powers of each digit.
;; Then, search all two to seven digit numbers.


(defn generate-ranges (num-ranges)
  (cond
    (= 0 num-ranges) ()
    true             (cons (range 0 10) (generate-ranges (dec num-ranges)))))

(defn powee
  (ll)
  (bind
   (powers-sum (apply + (mapt #(pow $1 5) ll))
    sorted-digits  (-> powers-sum
                       str
                       chars
                       (partial mapt int)
                       sort))
   (tuple (tuple ll sorted-digits) powers-sum)))

(defn find-fifth-power-digit-sum-nums (num-digits)
  (mapt second
        (filter #(apply = (head $1))
                (doall
                 (mapt powee
                       (distinct (mapt sort (apply product (generate-ranges num-digits)))))))))

(def numbers (apply + (map find-fifth-power-digit-sum-nums (range 2 7))))

(print-res
 numbers
 (apply + numbers))
