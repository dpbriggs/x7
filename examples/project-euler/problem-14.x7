(include "examples/project-euler/utils.x7")

(def collatz-seen (dict 1 0 2 1 4 2))

(defn update-seen
  "Update the collatz-seen dict and calculate the true chain length"
  (x acc orig)
  (bind
   (steps-left (get collatz-seen x)
    full-steps (+ steps-left acc))
   (do
       (def collatz-seen (set collatz-seen orig full-steps))
       full-steps)))

(defn collatz-inner
  "Actual work for collatz. Will use the collatz-seen dict"
  (x acc orig)
  (cond
   (not= nil (get collatz-seen x)) (update-seen x acc orig)  ;; Turns out it's just as slow to cache intermediates.
   (<= x 1)      acc
   (= 0 (% x 2)) (collatz-inner (/ x 2) (inc acc) orig)
   true          (collatz-inner (inc (* 3 x)) (inc acc) orig)))

(defn collatz
  "Calculate the length of the collatz chain for x"
  (x)
  (tuple (collatz-inner x 0 x) x))

(def one-million 1000000)

(println "This will take ~90s on a decent 2018 laptop")

(def res
     (max-by
      (fn (tup) (nth 0 tup))
      (map collatz (lazy (range one-million)))))

(print-res res)
