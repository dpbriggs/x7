;; Test if a sequence is not equal to each other
(defn not=
  "Test if a sequence is not equal to each other.
Example:
(not= 1 1 2) ; false
"
  (& args)
  (not (apply = args)))

;; Test if a collection is empty
(defn empty?
  "Test if a collection is empty."
  (x)
  (= 0 (len x)))

;; Test if a collection is non-empty

(defn non-empty?
  "Test if a collection is non-empty."
  (x)
  (not (empty? x)))

(defn is-even?
  "Test if the given item is even."
  (x)
  (= 0 (% x 2)))

;; Random

(defn dot-product
  "Dot product two vectors.
Example:
(dot-product '(1 2 3) '(4 5 6)) ; 32
"
  (l r)
  (cond
   (or (empty? l) (empty? r)) 0
   true (+ (* (head l) (head r))
           (dot-product (tail l) (tail r)))))

(defn inspect (x)
  (do (println x) x))

(defn quicksort
  "Sort a list using quicksort.
Example:
(quicksort '(3 1 2)) ; (1 2 3)
"
  (l)
  (cond
   (empty? l) l
   true (bind
         (pivot (head l)
          rest  (tail l)
          le    (filter (fn (x) (<= x pivot)) rest)
          ge    (filter (fn (x) (> x pivot)) rest))
         (+ (quicksort le) (list pivot) (quicksort ge)))))

(defn fib-step (x)
  (tuple (nth 1 x) (+ (nth 0 x) (nth 1 x))))

;; Reduce (0 1) `num` times using fib-step to
;; generate the `num`'th fibonacci number

(defn fib
  "Find the `num'th Fibonacci number."
  (num)
  (nth 0 (reduce
          fib-step
          (tuple 0 1)
          (range num))))

(defn docp
  "Pretty print the doc string of a function
   Example: (docp docp) ;; Pretty print the doc string of a function..."
  (sym)
  (println (doc sym)))


(defn doc-methods
  (record)
  (foreach
   (fn (rec-method)
       (do
           (println "- " (nth 0 rec-method))
           (println "  - " (nth 1 rec-method))))
   (methods record)))


(defn max
    "Maximum element in a list"
    (ll)
    (reduce
     (fn (acc x) (if (> acc x) acc x))
     ll))

(defn nil? (x)
  (= x nil))
